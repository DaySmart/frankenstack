"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Provider = void 0;
const aws_sdk_1 = require("aws-sdk");
const Logger_1 = require("./Logger");
class Provider {
    constructor(event) {
        this.sns = new aws_sdk_1.SNS();
        this.ssm = new aws_sdk_1.SSM();
        this.deploymentGuid = event.deploymentGuid;
        this.environment = event.environment;
        this.componentName = event.componentName;
        this.jobRunGuid = event.jobRunGuid;
        this.inputs = event.inputs;
        this.logGroup = event.logGroup;
        this.outputs = [];
        this.logger = new Logger_1.Logger(this.logGroup, this.jobRunGuid);
        console.log(event);
    }
    async decryptInputs() {
        for (let i = 0; i < this.inputs.length; i++) {
            if (this.inputs[i].Value.startsWith('ssm:')) {
                const resp = await this.ssm.getParameter({
                    Name: this.inputs[i].Value.replace('ssm:', ''),
                    WithDecryption: true
                }).promise();
                if (resp.Parameter) {
                    this.inputs[i].Value = resp.Parameter.Value;
                }
                else {
                    this.result = false;
                    await this.sendResponse();
                    throw Error(`Could not find Specified Parameter => ${this.inputs[i].Value}`);
                }
            }
        }
    }
    async provisionComponent() { }
    async sendResponse() {
        let resp = {
            deploymentGuid: this.deploymentGuid,
            env: this.environment,
            jobRunGuid: this.jobRunGuid,
            name: this.componentName,
            status: this.result ? 'Success' : 'Failed',
            outputs: JSON.stringify(this.outputs)
        };
        const respParams = {
            Message: JSON.stringify(resp),
            TopicArn: process.env.JOB_RUN_FINISHED_TOPIC_ARN
        };
        await this.sns.publish(respParams).promise();
    }
}
exports.Provider = Provider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBbUM7QUFDbkMscUNBQWtDO0FBRWxDLE1BQWEsUUFBUTtJQWFqQixZQUFZLEtBQVU7UUFIdEIsUUFBRyxHQUFHLElBQUksYUFBRyxFQUFFLENBQUM7UUFDaEIsUUFBRyxHQUFHLElBQUksYUFBRyxFQUFFLENBQUM7UUFHWixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhO1FBQ2YsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN6QyxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO29CQUNyQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUM7b0JBQzlDLGNBQWMsRUFBRSxJQUFJO2lCQUN2QixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBRWIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQWUsQ0FBQztpQkFDekQ7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7b0JBQ3BCLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUMxQixNQUFNLEtBQUssQ0FBQyx5Q0FBeUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUNoRjthQUNKO1NBQ0o7SUFHTCxDQUFDO0lBRUQsS0FBSyxDQUFDLGtCQUFrQixLQUFvQixDQUFDO0lBRTdDLEtBQUssQ0FBQyxZQUFZO1FBQ2QsSUFBSSxJQUFJLEdBQUc7WUFDUCxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQ3JCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDeEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUTtZQUMxQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1NBQ3hDLENBQUE7UUFFRCxNQUFNLFVBQVUsR0FBcUI7WUFDakMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzdCLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQjtTQUNuRCxDQUFBO1FBRUQsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0NBRUo7QUFsRUQsNEJBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU05TLCBTU00gfSBmcm9tICdhd3Mtc2RrJztcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9Mb2dnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyIHtcclxuICAgIHB1YmxpYyBkZXBsb3ltZW50R3VpZDogc3RyaW5nO1xyXG4gICAgcHVibGljIGVudmlyb25tZW50OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgY29tcG9uZW50TmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIGlucHV0czogQXJyYXk8eyBLZXk6IHN0cmluZywgVmFsdWU6IHN0cmluZyB9PjtcclxuICAgIHB1YmxpYyBvdXRwdXRzOiBBcnJheTx7IEtleTogc3RyaW5nLCBWYWx1ZTogc3RyaW5nIH0+O1xyXG4gICAgcHVibGljIHJlc3VsdDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBqb2JSdW5HdWlkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbG9nR3JvdXA6IHN0cmluZztcclxuICAgIHB1YmxpYyBsb2dnZXI6IExvZ2dlcjtcclxuICAgIHNucyA9IG5ldyBTTlMoKTtcclxuICAgIHNzbSA9IG5ldyBTU00oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihldmVudDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5kZXBsb3ltZW50R3VpZCA9IGV2ZW50LmRlcGxveW1lbnRHdWlkO1xyXG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBldmVudC5lbnZpcm9ubWVudDtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudE5hbWUgPSBldmVudC5jb21wb25lbnROYW1lO1xyXG4gICAgICAgIHRoaXMuam9iUnVuR3VpZCA9IGV2ZW50LmpvYlJ1bkd1aWQ7XHJcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBldmVudC5pbnB1dHM7XHJcbiAgICAgICAgdGhpcy5sb2dHcm91cCA9IGV2ZW50LmxvZ0dyb3VwO1xyXG4gICAgICAgIHRoaXMub3V0cHV0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMubG9nZ2VyID0gbmV3IExvZ2dlcih0aGlzLmxvZ0dyb3VwLCB0aGlzLmpvYlJ1bkd1aWQpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkZWNyeXB0SW5wdXRzKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5wdXRzW2ldLlZhbHVlLnN0YXJ0c1dpdGgoJ3NzbTonKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuc3NtLmdldFBhcmFtZXRlcih7XHJcbiAgICAgICAgICAgICAgICAgICAgTmFtZTogdGhpcy5pbnB1dHNbaV0uVmFsdWUucmVwbGFjZSgnc3NtOicsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSkucHJvbWlzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyZXNwLlBhcmFtZXRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRzW2ldLlZhbHVlID0gcmVzcC5QYXJhbWV0ZXIuVmFsdWUgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZFJlc3BvbnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENvdWxkIG5vdCBmaW5kIFNwZWNpZmllZCBQYXJhbWV0ZXIgPT4gJHt0aGlzLmlucHV0c1tpXS5WYWx1ZX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHByb3Zpc2lvbkNvbXBvbmVudCgpOiBQcm9taXNlPHZvaWQ+IHsgfVxyXG5cclxuICAgIGFzeW5jIHNlbmRSZXNwb25zZSgpIHtcclxuICAgICAgICBsZXQgcmVzcCA9IHtcclxuICAgICAgICAgICAgZGVwbG95bWVudEd1aWQ6IHRoaXMuZGVwbG95bWVudEd1aWQsXHJcbiAgICAgICAgICAgIGVudjogdGhpcy5lbnZpcm9ubWVudCxcclxuICAgICAgICAgICAgam9iUnVuR3VpZDogdGhpcy5qb2JSdW5HdWlkLFxyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLmNvbXBvbmVudE5hbWUsXHJcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5yZXN1bHQgPyAnU3VjY2VzcycgOiAnRmFpbGVkJyxcclxuICAgICAgICAgICAgb3V0cHV0czogSlNPTi5zdHJpbmdpZnkodGhpcy5vdXRwdXRzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVzcFBhcmFtczogU05TLlB1Ymxpc2hJbnB1dCA9IHtcclxuICAgICAgICAgICAgTWVzc2FnZTogSlNPTi5zdHJpbmdpZnkocmVzcCksXHJcbiAgICAgICAgICAgIFRvcGljQXJuOiBwcm9jZXNzLmVudi5KT0JfUlVOX0ZJTklTSEVEX1RPUElDX0FSTlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5zbnMucHVibGlzaChyZXNwUGFyYW1zKS5wcm9taXNlKCk7XHJcbiAgICB9XHJcblxyXG59Il19