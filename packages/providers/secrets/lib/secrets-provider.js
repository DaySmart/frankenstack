"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsProvider = void 0;
const aws_sdk_1 = require("aws-sdk");
const Provider_1 = require("@daysmart/frankenstack-base-provider/assets/Provider");
class SecretsProvider extends Provider_1.Provider {
    async provisionComponent() {
        let client = new aws_sdk_1.SSM();
        try {
            for (var input of this.inputs) {
                console.log(input);
                const paramName = `/${this.environment}/${this.componentName}/${input.Key}`;
                const resp = await client.putParameter({
                    Name: paramName,
                    Value: input.Value,
                    Type: 'SecureString',
                    Overwrite: true
                }).promise();
                console.log(resp);
                this.outputs.push({
                    Key: input.Key,
                    Value: `ssm:${paramName}`
                });
                console.log(this.outputs);
            }
            const allInputsParamName = `/${this.environment}/${this.componentName}`;
            const allResp = await client.putParameter({
                Name: allInputsParamName,
                Value: JSON.stringify(Object.assign({}, ...this.inputs.map(input => { return { [input.Key]: input.Value }; }))),
                Type: 'SecureString',
                Overwrite: true
            }).promise();
            console.log(allResp);
            this.result = true;
        }
        catch (err) {
            console.error(err);
        }
    }
}
exports.SecretsProvider = SecretsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0cy1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlY3JldHMtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQThCO0FBQzlCLG1GQUFnRjtBQUVoRixNQUFhLGVBQWdCLFNBQVEsbUJBQVE7SUFDekMsS0FBSyxDQUFDLGtCQUFrQjtRQUNwQixJQUFJLE1BQU0sR0FBRyxJQUFJLGFBQUcsRUFBRSxDQUFDO1FBRXZCLElBQUk7WUFDQSxLQUFJLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25CLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDNUUsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDO29CQUNuQyxJQUFJLEVBQUUsU0FBUztvQkFDZixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7b0JBQ2xCLElBQUksRUFBRSxjQUFjO29CQUNwQixTQUFTLEVBQUUsSUFBSTtpQkFDbEIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUViLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNkLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztvQkFDZCxLQUFLLEVBQUUsT0FBTyxTQUFTLEVBQUU7aUJBQzVCLENBQUMsQ0FBQztnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QjtZQUVELE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN4RSxNQUFNLE9BQU8sR0FBRyxNQUFNLE1BQU0sQ0FBQyxZQUFZLENBQUM7Z0JBQ3RDLElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRSxPQUFPLEVBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUcsSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLFNBQVMsRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUViLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDdEI7UUFBQyxPQUFNLEdBQUcsRUFBRTtZQUNULE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdEI7SUFDTCxDQUFDO0NBQ0o7QUF0Q0QsMENBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU1NNIH0gZnJvbSAnYXdzLXNkayc7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcIkBkYXlzbWFydC9mcmFua2Vuc3RhY2stYmFzZS1wcm92aWRlci9hc3NldHMvUHJvdmlkZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWNyZXRzUHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlciB7XHJcbiAgICBhc3luYyBwcm92aXNpb25Db21wb25lbnQoKSB7XHJcbiAgICAgICAgbGV0IGNsaWVudCA9IG5ldyBTU00oKTtcclxuICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IodmFyIGlucHV0IG9mIHRoaXMuaW5wdXRzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbU5hbWUgPSBgLyR7dGhpcy5lbnZpcm9ubWVudH0vJHt0aGlzLmNvbXBvbmVudE5hbWV9LyR7aW5wdXQuS2V5fWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwID0gYXdhaXQgY2xpZW50LnB1dFBhcmFtZXRlcih7XHJcbiAgICAgICAgICAgICAgICAgICAgTmFtZTogcGFyYW1OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIFZhbHVlOiBpbnB1dC5WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBUeXBlOiAnU2VjdXJlU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBPdmVyd3JpdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pLnByb21pc2UoKTtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dHB1dHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgS2V5OiBpbnB1dC5LZXksXHJcbiAgICAgICAgICAgICAgICAgICAgVmFsdWU6IGBzc206JHtwYXJhbU5hbWV9YFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm91dHB1dHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc3QgYWxsSW5wdXRzUGFyYW1OYW1lID0gYC8ke3RoaXMuZW52aXJvbm1lbnR9LyR7dGhpcy5jb21wb25lbnROYW1lfWA7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbFJlc3AgPSBhd2FpdCBjbGllbnQucHV0UGFyYW1ldGVyKHtcclxuICAgICAgICAgICAgICAgIE5hbWU6IGFsbElucHV0c1BhcmFtTmFtZSxcclxuICAgICAgICAgICAgICAgIFZhbHVlOiBKU09OLnN0cmluZ2lmeShPYmplY3QuYXNzaWduKHt9LCAuLi50aGlzLmlucHV0cy5tYXAoaW5wdXQgPT4ge3JldHVybiB7W2lucHV0LktleV06IGlucHV0LlZhbHVlfX0pKSksXHJcbiAgICAgICAgICAgICAgICBUeXBlOiAnU2VjdXJlU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgIE92ZXJ3cml0ZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KS5wcm9taXNlKCk7XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYWxsUmVzcCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlc3VsdCA9IHRydWU7XHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==