type Mutation {
    sendDeploymentForm(
        deploymentGuid: ID!
        template: Template!
    ): Boolean
    
    deploymentUpdate(
      deploymentGuid: ID!
      type: String!
      message: String!
      moreInfoComponentName: String
      moreInfoKey: String
      moreInfoType: String
    ): DeploymentUpdate

    putUser(
      userId: String!
      email: String
      policies: [String]
    ): Boolean!

    putPolicy(
      policyName: String!
      statements: [Statement]!
    ): Boolean!

    RemoveComponent(
      deploymentGuid: ID!
      env: String!
      componentName: String!
    ): Boolean

    jobRunRequest(
      deploymentGuid: ID!
      jobRunGuid: String!
      env: String!
      component: InputComponent!
    ): JobRunRequest

    jobRunFinished(
      deploymentGuid: String!
      jobRunGuid: ID!
      env: String!
      componentName: String!
      outputs: [KeyValueInput]
      status: DeploymentStatus
    ): Boolean
}

type Subscription {
  subscribeToDeploymentUpdate(deploymentGuid: ID!): DeploymentUpdate
    @aws_subscribe(mutations: ["deploymentUpdate"])

  subscribeToJobRunRequests(deploymentGuid: ID!): JobRunRequest
    @aws_subscribe(mutations: ["jobRunRequest"])
}

type Query {
	getDeploymentStatus(
    deploymentGuid: ID
  ): DeploymentStatus

  getComponentRollbackState(
    env: String!
    componentName: String!
  ): ComponentDeployment

  getResolvedInputs(
    env: String!
    component: InputComponent!
  ): [KeyValue]

  describeComponent(
    env: String!
    componentName: String!
  ): Component
}

type DeploymentUpdate {
  deploymentGuid: ID!
  type: String!
  message: String!
  moreInfoComponentName: String
  moreInfoType: String
  moreInfoKey: String
}

type JobRunRequest {
  deploymentGuid: ID!
  jobRunGuid: String!
  env: String!
  component: JobRunComponent!
}

type JobRunComponent {
  name: String!
  provider: Provider!
  inputs: [KeyValue] 
  outputs: [KeyValue]
}

type ComponentDeployment {
  deploymentGuid: ID!
  env: String!
  name: String!
  provider: Provider!
  inputs: [KeyValue]
  outputs: [KeyValue]
}

type Provider {
  name: String!
  config: [KeyValue]
}

type KeyValue {
  name: String!
  value: String!
}

input Template {
    env: String!
    components: [InputComponent]!
}

input InputComponent {
    name: String!
    provider: ProviderInput!
    inputs: [KeyValueInput] 
    outputs: [KeyValueInput]
}

input ProviderInput {
	name: String!
  config: [KeyValueInput]
}


input KeyValueInput {
    name: String
    value: String
}

input Statement {
  effect: Effect!
  actions: [String]!
  resources: [String]!
}

enum Effect {
  Allow
  Deny
}

enum DeploymentStatus {
  Success
  Failed
  Deleted
}

type DeploymentStatus {
  status: String
}

type Component {
  deploymentGuid: String!
  env: String!
  name: String!
  inputs: [KeyValue]
  outputs: [KeyValue]
  status: String!
  create: String!
  update: String!
}